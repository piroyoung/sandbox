{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "cloudstreaming_addresses",
						"type": "DatasetReference"
					},
					"name": "rawAddresses"
				},
				{
					"dataset": {
						"referenceName": "cloudstreaming_customers",
						"type": "DatasetReference"
					},
					"name": "rawCustomers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "customers",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "addressesWithRank"
				},
				{
					"name": "customerLatestAddresses"
				},
				{
					"name": "custmerWithRank"
				},
				{
					"name": "customerLatestInformations"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          AddressID as string,",
				"          CustomerID as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          CreatedDate as date,",
				"          UpdatedDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> rawAddresses",
				"source(output(",
				"          CustomerID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          PhoneNumber as string,",
				"          CreatedDate as date,",
				"          UpdatedDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> rawCustomers",
				"rawAddresses window(over(CustomerID),",
				"     desc(UpdatedDate, true),",
				"     k = rank()) ~> addressesWithRank",
				"addressesWithRank filter(k==1) ~> customerLatestAddresses",
				"rawCustomers window(over(CustomerID),",
				"     desc(UpdatedDate, true),",
				"     k = rank()) ~> custmerWithRank",
				"custmerWithRank filter(k==1",
				") ~> customerLatestInformations",
				"customerLatestInformations, customerLatestAddresses join(rawCustomers@CustomerID == rawAddresses@CustomerID,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}