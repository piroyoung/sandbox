{
	"name": "DumpToDatalake",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SourceAddresses",
						"type": "DatasetReference"
					},
					"name": "Addresses"
				},
				{
					"dataset": {
						"referenceName": "SourceCustomers",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "SourceOrders",
						"type": "DatasetReference"
					},
					"name": "Orders"
				},
				{
					"dataset": {
						"referenceName": "SourceOrderDetails",
						"type": "DatasetReference"
					},
					"name": "OrderDetails"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DatalakeAddresses",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DatalakeCustomers",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "DatalakeOrders",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "DatalakeOrderDetails",
						"type": "DatasetReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          AddressID as string,",
				"          CustomerID as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          CreatedDate as date,",
				"          UpdatedDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Addresses",
				"source(output(",
				"          CustomerID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          PhoneNumber as string,",
				"          CreatedDate as date,",
				"          UpdatedDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Customers",
				"source(output(",
				"          OrderID as string,",
				"          CustomerID as string,",
				"          OrderDate as date,",
				"          ShipDate as date,",
				"          TotalCost as decimal(19,4),",
				"          CreatedDate as date,",
				"          UpdatedDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Orders",
				"source(output(",
				"          OrderDetailID as string,",
				"          OrderID as string,",
				"          MovieID as string,",
				"          Quantity as integer,",
				"          UnitCost as decimal(19,4),",
				"          LineNumber as integer,",
				"          CreatedDate as date,",
				"          UpdatedDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> OrderDetails",
				"Addresses sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          AddressID as string,",
				"          CustomerID as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          CreatedDate as date,",
				"          UpdatedDate as date",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"Customers sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"Orders sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          OrderID as string,",
				"          CustomerID as string,",
				"          OrderDate as date,",
				"          ShipDate as date,",
				"          TotalCost as decimal(19,4),",
				"          CreatedDate as date,",
				"          UpdatedDate as date",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3",
				"OrderDetails sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          OrderDetailID as string,",
				"          OrderID as string,",
				"          MovieID as string,",
				"          Quantity as integer,",
				"          UnitCost as decimal(19,4),",
				"          LineNumber as integer,",
				"          CreatedDate as date,",
				"          UpdatedDate as date",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink4"
			]
		}
	}
}